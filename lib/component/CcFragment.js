"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var helper = _interopRequireWildcard(require("../core/helper"));

var _react = _interopRequireWildcard(require("react"));

var _constant = require("../support/constant");

var _emit = _interopRequireDefault(require("../core/emit"));

var _ccContext = _interopRequireDefault(require("../cc-context"));

var _util = _interopRequireDefault(require("../support/util"));

var ccClassKey_ccClassContext_ = _ccContext.default.ccClassKey_ccClassContext_,
    fragmentFeature_classKey_ = _ccContext.default.fragmentFeature_classKey_;

function getFeatureStr(stateToPropMapping) {
  var prefixedPropKeys = Object.keys(stateToPropMapping);
  var module_mapAllStateToProp_ = {};
  var index_targetModule_ = {};
  prefixedPropKeys.sort();
  prefixedPropKeys.forEach(function (prefixedKey, index) {
    if (!_util.default.isPrefixedKeyValid(prefixedKey)) {
      throw me(_constant.ERR.CC_CLASS_KEY_OF_STATE_TO_PROP_MAPPING_INVALID, "error occurred in cc fragment");
    }

    var _prefixedKey$split = prefixedKey.split('/'),
        targetModule = _prefixedKey$split[0],
        targetKey = _prefixedKey$split[1];

    index_targetModule_[index] = {
      targetModule: targetModule,
      targetKey: targetKey
    };

    if (targetKey === '*') {
      module_mapAllStateToProp_[targetModule] = true;
    }
  });
  var strArr = [];
  prefixedPropKeys.forEach(function (prefixedKey, index) {
    var targetModule = index_targetModule_[index];

    if (module_mapAllStateToProp_[targetModule] === true) {
      var str = targetModule + "/*";

      if (!strArr.includes(str)) {
        strArr.push(str);
      } else {
        _util.default.justWarning("prefixedKey:" + prefixedKey + " will be ignored in stateToPropMapping because of existing prefixedKey:" + str);
      }
    } else {
      strArr.push(prefixedKey);
    }
  });
  return strArr.join(',');
}

function getFragmentClassKey(stateToPropMapping) {
  var featureStr = getFeatureStr(stateToPropMapping);
  var targetClassKey = fragmentFeature_classKey_[featureStr];

  if (targetClassKey) {
    return targetClassKey;
  } else {
    var oldFragmentNameCount = _ccContext.default.fragmentNameCount;
    var fragmentNameCount = oldFragmentNameCount + 1;
    _ccContext.default.fragmentNameCount = fragmentNameCount;
    targetClassKey = _constant.CC_FRAGMENT_PREFIX + "_" + fragmentNameCount;
    fragmentFeature_classKey_[featureStr] = targetClassKey;
    return targetClassKey;
  }
}

var CcFragment =
/*#__PURE__*/
function (_Component) {
  (0, _inheritsLoose2.default)(CcFragment, _Component);

  function CcFragment(props, context) {
    var _this;

    _this = _Component.call(this, props, context) || this;
    var stateToPropMapping = props.stateToPropMapping,
        pm = props.pm,
        isPropStateModuleMode = props.isPropStateModuleMode,
        mm = props.mm,
        ccKey = props.ccKey,
        connect = props.connect;

    var _stateToPropMapping = stateToPropMapping || pm;

    var _isPropStateModuleMode = isPropStateModuleMode || mm;

    if (_stateToPropMapping === undefined) _stateToPropMapping = {};
    if (_isPropStateModuleMode === undefined) _isPropStateModuleMode = false; //allow use connect replace stateToPropMapping, and when use connect, isPropStateModuleMode is always true

    if (connect) {
      _stateToPropMapping = connect;
      _isPropStateModuleMode = true;
    }

    var ccClassKey = getFragmentClassKey(_stateToPropMapping);
    var ccUniqueKey = '',
        isCcUniqueKeyAutoGenerated = false;

    if (ccKey) {
      // for CcFragment, if user supply ccKey to props, ccUniqueKey will equal ccKey
      ccUniqueKey = ccKey;
    } else {
      var _helper$computeCcUniq = helper.computeCcUniqueKey(false, ccClassKey, ccKey, true),
          ck = _helper$computeCcUniq.ccKey,
          cuk = _helper$computeCcUniq.ccUniqueKey,
          ag = _helper$computeCcUniq.isCcUniqueKeyAutoGenerated;

      ccUniqueKey = cuk;
      isCcUniqueKeyAutoGenerated = ag;
      ccKey = ck;
    }

    helper.buildCcClassContext(ccClassKey, _constant.MODULE_DEFAULT, [], [], [], [], _stateToPropMapping, _isPropStateModuleMode, true);
    helper.setRef((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), false, ccClassKey, ccKey, ccUniqueKey, {}, true); // for CcFragment, just put ccClassKey to module's cc class keys

    var moduleName_ccClassKeys_ = _ccContext.default.moduleName_ccClassKeys_;

    var ccClassKeys = _util.default.safeGetArrayFromObject(moduleName_ccClassKeys_, _constant.MODULE_DEFAULT);

    if (!ccClassKeys.includes(ccClassKey)) ccClassKeys.push(ccClassKey);
    _this.$$propState = ccClassKey_ccClassContext_[ccClassKey].propState || {}; // only bind reactForceUpdateRef for CcFragment

    var reactForceUpdateRef = _this.forceUpdate.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));

    var ccState = {
      module: _constant.MODULE_DEFAULT,
      ccClassKey: ccClassKey,
      ccKey: ccKey,
      ccUniqueKey: ccUniqueKey,
      isCcUniqueKeyAutoGenerated: isCcUniqueKeyAutoGenerated,
      stateToPropMapping: _stateToPropMapping,
      renderCount: 0
    };
    _this.cc = {
      ccState: ccState,
      reactForceUpdate: function reactForceUpdate(state, cb) {
        ccState.renderCount += 1;
        reactForceUpdateRef(state, cb);
      }
    };
    var dispatcher = helper.getDispatcherRef();
    _this.state = {
      fragmentParams: {
        propState: _this.$$propState,
        emit: _emit.default,
        dispatch: dispatcher.__$$getDispatchHandler(_constant.STATE_FOR_ALL_CC_INSTANCES_OF_ONE_MODULE, _constant.MODULE_DEFAULT, null, null, null, -1, ccKey),
        effect: dispatcher.__$$getEffectHandler(ccKey),
        xeffect: dispatcher.__$$getXEffectHandler(ccKey),
        lazyEffect: dispatcher.__$$getLazyEffectHandler(ccKey),
        lazyXeffect: dispatcher.__$$getLazyXEffectHandler(ccKey),
        setState: function setState(module, state, lazyMs) {
          dispatcher.$$changeState(state, {
            ccKey: ccKey,
            module: module,
            stateFor: _constant.STATE_FOR_ALL_CC_INSTANCES_OF_ONE_MODULE,
            broadcastTriggeredBy: null,
            lazyMs: lazyMs
          });
        },
        setGlobalState: function setGlobalState(state, lazyMs) {
          dispatcher.$$changeState(state, {
            ccKey: ccKey,
            MODULE_GLOBAL: _constant.MODULE_GLOBAL,
            stateFor: _constant.STATE_FOR_ALL_CC_INSTANCES_OF_ONE_MODULE,
            broadcastTriggeredBy: null,
            lazyMs: lazyMs
          });
        }
      }
    };
    return _this;
  }

  var _proto = CcFragment.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate() {
    return false;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this$cc$ccState = this.cc.ccState,
        ccUniqueKey = _this$cc$ccState.ccUniqueKey,
        ccClassKey = _this$cc$ccState.ccClassKey;
    helper.unsetRef(ccClassKey, ccUniqueKey);
    if (_Component.prototype.componentWillUnmount) _Component.prototype.componentWillUnmount.call(this);
  };

  _proto.render = function render() {
    var children = this.props.children;

    if (typeof children === 'function') {
      return children(this.state.fragmentParams) || _react.default.createElement(_react.Fragment, null);
    } else {
      return children;
    }
  };

  return CcFragment;
}(_react.Component);

exports.default = CcFragment;